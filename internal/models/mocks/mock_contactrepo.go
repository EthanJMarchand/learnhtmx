// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethanjmarchand/learnhtmx/internal/models (interfaces: ContactRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ethanjmarchand/learnhtmx/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockContactRepo is a mock of ContactRepo interface.
type MockContactRepo struct {
	ctrl     *gomock.Controller
	recorder *MockContactRepoMockRecorder
}

// MockContactRepoMockRecorder is the mock recorder for MockContactRepo.
type MockContactRepoMockRecorder struct {
	mock *MockContactRepo
}

// NewMockContactRepo creates a new mock instance.
func NewMockContactRepo(ctrl *gomock.Controller) *MockContactRepo {
	mock := &MockContactRepo{ctrl: ctrl}
	mock.recorder = &MockContactRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactRepo) EXPECT() *MockContactRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockContactRepo) Delete(arg0 *models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContactRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContactRepo)(nil).Delete), arg0)
}

// GetContact mocks base method.
func (m *MockContactRepo) GetContact(arg0 int) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockContactRepoMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockContactRepo)(nil).GetContact), arg0)
}

// New mocks base method.
func (m *MockContactRepo) New(arg0 *models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockContactRepoMockRecorder) New(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockContactRepo)(nil).New), arg0)
}

// Read mocks base method.
func (m *MockContactRepo) Read(arg0 string) (*[]models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*[]models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockContactRepoMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockContactRepo)(nil).Read), arg0)
}

// ReadAll mocks base method.
func (m *MockContactRepo) ReadAll() (*[]models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].(*[]models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockContactRepoMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockContactRepo)(nil).ReadAll))
}

// Update mocks base method.
func (m *MockContactRepo) Update(arg0 *models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContactRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContactRepo)(nil).Update), arg0)
}
